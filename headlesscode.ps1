$filePath = $args[0]
$testName = $args[1]

$defaultDuration = 7 # Default Duration Set to 5 Seconds...
$ErrorActionPreference = "SilentlyContinue"

$duration = $defaultDuration

# Screen Record & Screenshot Duration Calulation..
$screenshotTime = $duration - 1
$duration = [timespan]::fromseconds($duration)
$duration = $duration.ToString("hh\:mm\:ss\.ff")
$screenshotTime = [timespan]::fromseconds($screenshotTime)
$screenshotTime = $screenshotTime.ToString("hh\:mm\:ss\.ff")

$urls = Get-Content -Path $filePath

if ($urls.Length -ne 0) {

    Write-Output '[ MALWARE-DOWNLOADER-POWERSHELL ] Developed By Aayush Rajthala!'

    # Keystrokes Generation Object...
    # $wshell = New-Object -ComObject wscript.shell;
    
    # Timestamp, Count for Unique Identity of Files & Directories...
    $count = 1
    $date = Get-Date -UFormat "%b-%d-%Y"
    $time = Get-Date -Format "HH\H-mm\m-ss\s"
    $timestamp = $date + '-' + $time
    $directoryName = $testName + '_' + $timestamp

    Write-Output "Directory Generation in Progess!!!"
    ./scripts/directorygeneration.ps1 $directoryName
    Write-Output "Directory Generation in Progess!!!"

    $recordingPath = ".\results\$directoryName\recordings"
    $responsePath = ".\results\$directoryName\responses"
    $screenshotPath = ".\results\$directoryName\screenshots"
    $malwarePath = ".\results\$directoryName\downloadedMalwares"

    ForEach ($url in $urls) {
        try {
            $url = $url.Trim() # Removes white/blank spaces from URLs...

            if ($url.Length -gt 0) {
                
                # Clear Console Screen
                Clear-Host

                $navigationUrl = $url

                $downloadFile = [System.IO.Path]:: GetFileNameWithoutExtension($url)
    
                if ($url.contains('https://github.com') -or $url.contains('http://github.com')) {
                    if (!($url.contains('.txt'))) {
                        if (!($url.contains('raw'))) {
                            $navigationUrl = $navigationUrl + '?raw=true'
                        }
                    }
                }

                # Filename Generation Operation...
                $fileCount = [string]$count
                $filename = $downloadFile
                $filename = $filename.Replace('/', '_')
                $filename = $filename -replace '[^a-zA-Z0-9.]', ''
                $filename = $fileCount + '_' + $filename
                $count = $count + 1

                Write-Output "Response Generation Operation Started!!!"
                ./scripts/response.ps1 $responsePath $filename $navigationUrl &
                
                Write-Output "Packet Capture Operation Started!!!"
                ./scripts/packetcapture.ps1 1 4 $directoryName $filename &
                
                $timer = [Diagnostics.Stopwatch]::StartNew()

                Write-Output "Browser Navigation Started!!!"
                # Browser Initialization in Incognito Mode... 
                & "chrome.exe" --incognito --new-window --start-maximized $url
                Write-Output "Navigating to: $url"
                
                Write-Output "Getting Window Title!!!"
                Start-Sleep -Seconds 2.5
                $title = (Get-Process -Name chrome | Select-Object MainWindowTitle)
                ForEach ($i in $title) { if ($i.mainWindowTitle -ne '') { $title = $i.mainWindowTitle; break; } }
                $ffmpegTitle = 'title=' + $title
                Write-Output "Got Browser Title: $ffmpegTitle"

                if ($url.contains('https://github.com') -or $url.contains('http://github.com')) {
                    if (!($url.contains('.txt'))) {
                        if (!($url.contains('raw'))) {
                            Start-Sleep -Seconds 1
                            & "chrome.exe" --incognito --new-tab --start-maximized $navigationUrl
                            Write-Output "Navigating to: $navigationUrl"
                        }
                    }
                }

                Write-Output "Screen Recording in Progess!!!"
                # Screen Record Operation...
                ffmpeg -f gdigrab -framerate 12 -i $ffmpegTitle -loglevel error -t $duration -s hd1080 -aspect 16:9 -an -vcodec libx264 $recordingPath\$filename.mp4
                Write-Output "Screen Recording Completed!!!"
                
                Write-Output "Screenshot in Progess!!!"
                # Screenshot Operation...
                ffmpeg -i $recordingPath\$filename.mp4 -ss $screenshotTime -frames:v 1 -q:v 2 $screenshotPath\$filename.jpeg
                Write-Output "Screenshot Taken!!!"

                Stop-Process -Name chrome
                Write-Output "Chrome Process Ended!!!"
                
                while ($timer.Elapsed.TotalSeconds -lt $timeout) {
                    ./scripts/packetcapture.ps1 0
                }
                $timer.Stop()
                Write-Output "Ended Packet Capture Operation!!!"
            }
        }
        catch {
            Write-Output "--ERROR--Exception Caught For $url"
        }
        
    }

    # Clear Console Screen
    Clear-Host
        
    Copy-Item ".\urls.txt" -Destination ".\results\$directoryName\"
    Move-Item -Path ".\tempDownloadFolder\*" -Destination "$malwarePath"
    Remove-Item ".\tempDownloadFolder\" -Recurse -Force
    
    # Python Call for Hash Check...
    Write-Output 'Checking File Hashes'
    python ./scripts/hashCheck.py "./results/$directoryName/"
    Write-Output 'File Hash Check Operation Ended'
    
    Write-Output $('--' + $testName + ' Test Completed!')
    Exit
}
else {
    Write-Output $('--ERROR--[ ' + $filePath + ' ]--File is Empty!!!')
    Exit
}